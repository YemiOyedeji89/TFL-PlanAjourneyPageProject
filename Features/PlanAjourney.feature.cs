// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlanAjourneyPageProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PlanAjourney")]
    public partial class PlanAjourneyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PlanAjourney.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PlanAjourney", "As a tfl user, I want to be able to plan a journey using the tfl plan a journey w" +
                    "idget on the tfl website.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Plan a journey now with valid data")]
        [NUnit.Framework.CategoryAttribute("PlanJourney")]
        public virtual void PlanAJourneyNowWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "PlanJourney"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plan a journey now with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given("that I am on the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To"});
                table1.AddRow(new string[] {
                            "Abbey Wood (London), Abbey Wood Station",
                            "Woolwich, Woolwich Arsenal national rail station"});
#line 11
 testRunner.When("I enter location", ((string)(null)), table1, "When ");
#line hidden
#line 14
 testRunner.And("I set the time leaving now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("I click on plan my journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To"});
                table2.AddRow(new string[] {
                            "Abbey Wood (London), Abbey Wood Station",
                            "Woolwich, Woolwich Arsenal national rail station"});
#line 16
 testRunner.Then("I should be taken to the journey result page", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Plan a future journey with valid data")]
        [NUnit.Framework.CategoryAttribute("PlanJourney")]
        public virtual void PlanAFutureJourneyWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "PlanJourney"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plan a future journey with valid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
testRunner.Given("that I am on the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To"});
                table3.AddRow(new string[] {
                            "Abbey Wood (London), Abbey Wood Station",
                            "Woolwich, Woolwich Arsenal national rail station"});
#line 25
 testRunner.When("I enter location", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Time"});
                table4.AddRow(new string[] {
                            "Tue 25 Oct",
                            "17:45"});
#line 28
 testRunner.And("I select the date and time", ((string)(null)), table4, "And ");
#line hidden
#line 31
 testRunner.And("I click on plan my journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "DateAndTime"});
                table5.AddRow(new string[] {
                            "Tuesday 25th Oct, 17:45"});
#line 32
 testRunner.Then("I should be taken to the journey result date and time planned", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that recent plan journey are displayed correctly")]
        [NUnit.Framework.CategoryAttribute("PlanJourney")]
        public virtual void TestThatRecentPlanJourneyAreDisplayedCorrectly()
        {
            string[] tagsOfScenario = new string[] {
                    "PlanJourney"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that recent plan journey are displayed correctly", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given("that I am on the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To"});
                table6.AddRow(new string[] {
                            "Abbey Wood (London), Abbey Wood Station",
                            "Woolwich, Woolwich Arsenal national rail station"});
#line 42
 testRunner.When("I enter location", ((string)(null)), table6, "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Time"});
                table7.AddRow(new string[] {
                            "Tue 25 Oct",
                            "17:45"});
#line 46
 testRunner.And("I select the date and time", ((string)(null)), table7, "And ");
#line hidden
#line 49
 testRunner.And("I click Trun on recent journey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("I click on plan my journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "DateAndTime"});
                table8.AddRow(new string[] {
                            "Tuesday 25th Oct, 17:45"});
#line 52
 testRunner.And("I am on the Journey result page", ((string)(null)), table8, "And ");
#line hidden
#line 55
 testRunner.And("I navigated back to the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "RecentPlan"});
                table9.AddRow(new string[] {
                            "Abbey Wood (London), Abbey Wood Station to Woolwich, Woolwich Arsenal national ra" +
                                "il station"});
#line 57
 testRunner.Then("I can see my journey planned in the Rescent tab", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a successful planned journey can be edited")]
        [NUnit.Framework.CategoryAttribute("PlanJourney")]
        public virtual void TestThatASuccessfulPlannedJourneyCanBeEdited()
        {
            string[] tagsOfScenario = new string[] {
                    "PlanJourney"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a successful planned journey can be edited", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
testRunner.Given("that I am on the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To"});
                table10.AddRow(new string[] {
                            "Abbey Wood (London), Abbey Wood Station",
                            "Woolwich, Woolwich Arsenal national rail station"});
#line 65
 testRunner.When("I enter location", ((string)(null)), table10, "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Time"});
                table11.AddRow(new string[] {
                            "Tue 25 Oct",
                            "17:45"});
#line 69
 testRunner.And("I select the date and time", ((string)(null)), table11, "And ");
#line hidden
#line 73
 testRunner.And("I click on plan my journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "DateAndTime"});
                table12.AddRow(new string[] {
                            "Tuesday 25th Oct, 17:45"});
#line 74
 testRunner.And("I am on the Journey result page", ((string)(null)), table12, "And ");
#line hidden
#line 78
 testRunner.When("I click Edit journey", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To"});
                table13.AddRow(new string[] {
                            "North Greenwich, North Greenwich Underground Station",
                            "Woolwich, Woolwich Arsenal national rail station"});
#line 79
 testRunner.And("I updated the location", ((string)(null)), table13, "And ");
#line hidden
#line 83
 testRunner.And("I click arriving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Time"});
                table14.AddRow(new string[] {
                            "Thu 10 Nov",
                            "14:45"});
#line 84
 testRunner.And("I updated the date and time", ((string)(null)), table14, "And ");
#line hidden
#line 88
 testRunner.And("I click on update journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To",
                            "DateAndTime"});
                table15.AddRow(new string[] {
                            "North Greenwich, North Greenwich Underground Station",
                            "Woolwich, Woolwich Arsenal national rail station",
                            "Thursday 10th Nov, 14:45"});
#line 89
 testRunner.Then("I can see my planned journey updated in the Juorney Result Page", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Plan a journey with invalid data")]
        [NUnit.Framework.CategoryAttribute("PlanJourney")]
        [NUnit.Framework.TestCaseAttribute("123.1", "6666", "Thu 10 Nov", "14:45", "Sorry, we can\'t find a journey matching your criteria", null)]
        [NUnit.Framework.TestCaseAttribute("333fff6666", "6666hh7", "Thu 10 Nov", "14:45", "Sorry, we can\'t find a journey matching your criteria", null)]
        [NUnit.Framework.TestCaseAttribute("gggggggggggggggggggggggg", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "Thu 10 Nov", "14:45", "Sorry, we can\'t find a journey matching your criteria", null)]
        public virtual void PlanAJourneyWithInvalidData(string from, string to, string date, string time, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PlanJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("To", to);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Time", time);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plan a journey with invalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 98
 testRunner.Given("that I am on the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 99
 testRunner.When(string.Format("I enter location  from \"{0}\" and location to \"{1}\"", from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.And(string.Format("I set the date \"{0}\" and time \"{1}\"", date, time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("I click arriving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("I click on plan my journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then(string.Format("I should be taken to the journey result page section with location  from \"{0}\" an" +
                            "d location to \"{1}\"", from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And(string.Format("I should get an errorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Plan a journey when the widget fields From and To are blank")]
        [NUnit.Framework.CategoryAttribute("PlanJourney")]
        [NUnit.Framework.TestCaseAttribute("", "", "Thu 10 Nov", "14:45", "The From field is required.", "The To field is required.", null)]
        public virtual void PlanAJourneyWhenTheWidgetFieldsFromAndToAreBlank(string from, string to, string date, string time, string fieldErrorMessageFrom, string fieldErrorMessageTo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PlanJourney"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("From", from);
            argumentsOfScenario.Add("To", to);
            argumentsOfScenario.Add("Date", date);
            argumentsOfScenario.Add("Time", time);
            argumentsOfScenario.Add("FieldErrorMessageFrom", fieldErrorMessageFrom);
            argumentsOfScenario.Add("FieldErrorMessageTo", fieldErrorMessageTo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plan a journey when the widget fields From and To are blank", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 115
 testRunner.Given("that I am on the tfl plan a journey page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
 testRunner.When(string.Format("I enter from \"{0}\" and location to \"{1}\"", from, to), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.When(string.Format("I set the date \"{0}\" and time \"{1}\"", date, time), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.And("I click arriving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("I click on plan my journey tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.Then(string.Format("I should get field error message from \"{0}\" and field error message to \"{1}\"", fieldErrorMessageFrom, fieldErrorMessageTo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
